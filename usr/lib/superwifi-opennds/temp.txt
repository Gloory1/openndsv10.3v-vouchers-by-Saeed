PRAGMA foreign_keys = ON;


-- customers table
CREATE TABLE IF NOT EXISTS customers (
id INTEGER PRIMARY KEY AUTOINCREMENT,
mac_address TEXT UNIQUE NOT NULL,
name TEXT DEFAULT 'Guest',
created_at TEXT DEFAULT (datetime('now')),
last_seen TEXT,
total_sessions INTEGER DEFAULT 0
);


-- packages table
CREATE TABLE IF NOT EXISTS packages (
id INTEGER PRIMARY KEY AUTOINCREMENT,
created_at TEXT DEFAULT (datetime('now')),
description TEXT DEFAULT 'Vouchers package',
quantity INTEGER DEFAULT 0,
membership INTEGER DEFAULT 2,
time_limit INTEGER DEFAULT 60,
rate_up INTEGER DEFAULT 0,
rate_down INTEGER DEFAULT 0,
quota_up INTEGER DEFAULT 0,
quota_down INTEGER DEFAULT 0
);


-- vouchers table (usage-based accumulators)
CREATE TABLE IF NOT EXISTS vouchers (
id INTEGER PRIMARY KEY AUTOINCREMENT,
token TEXT UNIQUE NOT NULL,
package_id INTEGER DEFAULT 0,
user_mac TEXT DEFAULT '0',
first_punched INTEGER DEFAULT 0,
last_punched INTEGER DEFAULT 0,
accum_usage_season INTEGER DEFAULT 0,
accum_usage_total INTEGER DEFAULT 0,
quota_expired INTEGER DEFAULT 0,
FOREIGN KEY(package_id) REFERENCES packages(id)
);


-- auth_log table (ordered as requested)
-- result codes:
-- 0 = success
-- 1 = not exist
-- 2 = voucher expire (manually flagged)
-- 3 = quota expire
-- 4 = time expire
CREATE TABLE IF NOT EXISTS auth_log (
id INTEGER PRIMARY KEY AUTOINCREMENT,
customer_id INTEGER,
token TEXT,
user_mac TEXT NOT NULL,
ip_address TEXT,
attempt_time TEXT DEFAULT (datetime('now')),
result INTEGER NOT NULL DEFAULT 0,
FOREIGN KEY(customer_id) REFERENCES customers(id)
);


-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_vouchers_token ON vouchers(token);
CREATE INDEX IF NOT EXISTS idx_vouchers_user_mac ON vouchers(user_mac);
CREATE INDEX IF NOT EXISTS idx_vouchers_first_punched ON vouchers(first_punched);
CREATE INDEX IF NOT EXISTS idx_auth_log_time ON auth_log(attempt_time);
